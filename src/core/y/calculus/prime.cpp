#include "y/calculus/prime.hpp"

namespace Yttrium
{

    namespace Core
    {
        const uint8_t Prime::P8
#include "p8.hxx"
        ;

        const uint16_t Prime::P16
#include "p16.hxx"
        ;

        const size_t Prime:: Pi2ToThe[] =
        {
            0,            //!< <= 2^0
            1,            //!< <= 2^1
            2,            //!< <= 2^2
            4,            //!< <= 2^3
            6,            //!< <= 2^4
            11,           //!< <= 2^5
            18,           //!< <= 2^6
            31,           //!< <= 2^7
            54,           //!< <= 2^8
            97,           //!< <= 2^9
            172,          //!< <= 2^10
            309,          //!< <= 2^11
            564,          //!< <= 2^12
            1028,         //!< <= 2^13
            1900,         //!< <= 2^14
            3512,         //!< <= 2^15
            6542,         //!< <= 2^16
            12251,        //!< <= 2^17
            23000,        //!< <= 2^18
            43390,        //!< <= 2^19
            82025,        //!< <= 2^20
            155611,       //!< <= 2^21
            295947,       //!< <= 2^22
            564163,       //!< <= 2^23
            1077871,      //!< <= 2^24
            2063689,      //!< <= 2^25
            3957809,      //!< <= 2^26
            7603553,      //!< <= 2^27
            14630843,     //!< <= 2^28
            28192750,     //!< <= 2^29
            54400028,     //!< <= 2^30
            105097565,    //!< <= 2^31
            203280221     //!< <= 2^32
            //, 393615806, 762939111, 1480206279, 2874398515, 5586502348, 10866266172, 21151907950, 41203088796, 80316571436, 156661034233, 305761713237, 597116381732, 1166746786182, 2280998753949, 4461632979717, 8731188863470, 17094432576778, 33483379603407, 65612899915304, 128625503610475
        };

        unsigned Prime::Get(const size_t i) noexcept
        {
            static const uint8_t  * const t8  = P8-1;
            static const uint16_t * const t16 = P16-(N8+1);
            assert(i>=1);
            assert(i<=Pi16);

            if(i<=N8)
            {
                return t8[i];
            }
            else
            {
                assert(i<=Pi16);
                return t16[i];
            }
        }
    }

    bool Prime64:: Is_(const uint64_t n) noexcept
    {
        return Core::Prime::Check<uint64_t>(n);
    }

    uint64_t Prime64::Next(uint64_t p) noexcept
    {
        switch(p)
        {
            case 0:
            case 1:
            case 2:
                return 2;
            default:
                p|=1;
                break;
        }
        while(!Is_(p)) p += 2;
        return p;
    }


}
