"""  import what's necessary """import numpy as npfrom scipy.integrate import solve_ivpimport matplotlib.pyplot as pltKw = 1e-14def evolution(t, z, a, b, c, d):    """     definition of equation        # t : time, unsused but necessary for ODE        # z : [x,y] vector, initial conditions        # a,b,d,c: parameters    """    x, y = z    return [a*x - b*x*y,  c*x*y - d*y]def water(t,z,rho):    """        Parameters    ----------    t : real, time    z : [h=proton,w=hydroxy]    Returns    -------    dz/dt    """    h,w = z    forward = rho * Kw    reverse = rho * h *w    rate    = forward - reverse    return [rate,rate]tmax = 10sol  = solve_ivp(water,[0,tmax],[0.0001,0.0003],args=(1e3,),dense_output=True)# using SciPy Initial Value Problem solver#tmax = 15.0#sol  = solve_ivp(evolution, [0,tmax], [10, 5], args=(3, 1, 1, 3), #               dense_output=True) # using result to draw somethingt = np.linspace(0, tmax, 100)z = sol.sol(t)plt.plot(t, z.T)plt.show()hw = np.split(z.T,2,axis=1)h = hw[0]w = hw[1]prod = h*wplt.plot(t, - np.log10(prod) )plt.show()